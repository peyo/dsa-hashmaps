1. Create a HashMap class

  Export your HashMap module
    Done

  Create a .js file called HashMaps_drills. In the file import the HashMap module. Create a function called main()
    Done

  Inside your main() function, create a hash map called lotr.
    Done

  For your hash map that you have created, set the MAX_LOAD_RATIO = 0.5 and SIZE_RATIO = 3.
    Done

  Add the following items to your hash map: {"Hobbit": "Bilbo"}, {"Hobbit": "Frodo"},
  {"Wizard": "Gandalf"}, {"Human": "Aragorn"}, {"Elf": "Legolas"}, {"Maiar": "The Necromancer"},
  {"Maiar": "Sauron"}, {"RingBearer": "Gollum"}, {"LadyOfLight": "Galadriel"}, {"HalfElven": "Arwen"},
  {"Ent": "Treebeard"}
    Done

  Print your hash map and notice the length and items that are hashed in your hash map. Have you hashed all the items you were asked to?
    No. The first inputs are missing of particular races.

  Retrieve the value that is hashed in the key Maiar and Hobbit.
    Maiar search result: Sauron
    Hobbit search result: Frodo

  What are the values of Maiar and Hobbit that you have? Is there a discrepancy? Explain your answer.
    No discrepancy. The names provided are the ones that were entered the latest.

  What is the capacity of your hash table after you have hashed all the above items? Explain your answer.
    The capacity is 24.

    The initial _capacity is 8.
    The initial loadRatio is 1/8 (.125).
    If the loadRatio is greater than the MAX_LOAD_RATIO (.5),
      then resize by 3.

    When the 5th item is added to the HashMap, the loadRatio is 5/8 (.625). At this time, resize by 8*3.
    The _capacity is now 24.
    The loadRatio is 10/24 (.42).
    Once 3 more items are added to the HashMap, another resize will take place.

3. Demonstrate understanding of Hash maps

  *You don't need to write code for the following two drills. use any drawing app or simple pen and paper *

  1) Show your hash map after the insertion of keys 10, 22, 31, 4, 15, 28, 17, 88, 59 into a hash map of length 11 using open addressing and a hash function k mod m, where k is the key and m is the length.

    

  2) Show your hash map after the insertion of the keys 5, 28, 19, 15, 20, 33, 12, 17, 10 into the hash map with collisions resolved by separate chaining. Let the hash table have a length m = 9, and let the hash function be k mod m.